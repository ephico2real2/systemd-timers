name: Deploy System Monitor & Systemd Timers

on:
  push:
    branches:
      - main
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 1: Validate Environment
      - name: Validate Environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "🔍 Checking system requirements..."
            python3 --version || { echo "❌ Python3 not found"; exit 1; }
            
            # Set the default time zone to Europe/London
            echo "🌍 Setting time zone to Europe/London..."
            sudo timedatectl set-timezone Europe/London
            timedatectl status
            
            # Get available disk space in human-readable format and in bytes.
            free_space_hr=$(df --output=avail -h /usr/local | tail -n 1 | tr -d ' ')
            free_space_bytes=$(df --output=avail -B1 /usr/local | tail -n 1 | tr -d ' ')
            # Ensure at least 1GB (1073741824 bytes) is available.
            if [ "$free_space_bytes" -lt 1073741824 ]; then
              echo "❌ Low disk space: only ${free_space_hr} available"
              exit 1
            fi
            systemctl --version || { echo "❌ Systemd not found"; exit 1; }

      # Step 2: Backup Existing Configuration
      - name: Backup Existing Configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            backup_dir="/root/systemd-backups/$(date +%Y%m%d_%H%M%S)"
            sudo mkdir -p "$backup_dir"
            for service in zendesk-it-glue it-glue-backup jamf-pro-notifications zendesk-statusio; do
              sudo cp /etc/systemd/system/$service.{service,timer} "$backup_dir/" 2>/dev/null || true
            done
            sudo cp -r /usr/local/dotmobi-tools "$backup_dir/" 2>/dev/null || true
            cd /root/systemd-backups && ls -t | tail -n +6 | xargs sudo rm -rf
            echo "📦 Backup created in $backup_dir"

      # Step 3: Create Deployment Folder & Setup Environment
      - name: Setup Environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -ex
            rm -rf ~/deploy-temp && mkdir -p ~/deploy-temp
            sudo mkdir -p /usr/local/api/logs /usr/local/dotmobi-tools/scripts
            sudo chmod 755 /usr/local/api/logs /usr/local/dotmobi-tools/scripts
            sudo apt update && sudo apt install -y python3-pip
            sudo /usr/bin/python3 -m pip install --upgrade google-api-python-client

      # # Step 4: Copy Deployment Files
      # - name: Copy Deployment Files
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.AWS_HOST }}
      #     username: ${{ secrets.REMOTE_USER }}
      #     key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
      #     source: "systemd-timer/*,dotmobi-tools/*"
      #     target: "~/deploy-temp"
      #     strip_components: 0
          
        # Step 4: Copy Deployment Files using SSH instead of SCP Action
      - name: Copy Deployment Files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -e
            echo "🚀 Copying deployment files..."
            # Ensure deploy-temp directory exists
            rm -rf ~/deploy-temp && mkdir -p ~/deploy-temp
            # Use SCP to transfer files from GitHub Actions runner to the remote host
            scp -o StrictHostKeyChecking=no -r systemd-timer/* dotmobi-tools/* ${{ secrets.REMOTE_USER }}@${{ secrets.AWS_HOST }}:~/deploy-temp/
            echo "✅ Files successfully copied to ~/deploy-temp"


      # Step 5: Configure Logrotate
      - name: Configure Logrotate
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            sudo tee /etc/logrotate.d/api-logs <<'EOL'
            /usr/local/api/logs/*.log /usr/local/api/logs/*.json {
                daily
                rotate 7
                compress
                delaycompress
                missingok
                notifempty
                create 644 root root
                dateext
                dateformat -%Y%m%d
                su root root
            }
            EOL
            sudo logrotate -d /etc/logrotate.d/api-logs

      # Step 6: Deploy and Enable Services
      - name: Deploy and Enable Services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            set -ex

            # ✅ Validate systemd unit files in deploy-temp folder BEFORE copying them over.
            for service in zendesk-it-glue it-glue-backup jamf-pro-notifications zendesk-statusio; do
              sudo systemd-analyze verify "$HOME/deploy-temp/systemd-timer/$service.service" || exit 1
              sudo systemd-analyze verify "$HOME/deploy-temp/systemd-timer/$service.timer" || exit 1
            done

            # Deploy service and timer files to /etc/systemd/system.
            sudo cp -f ~/deploy-temp/systemd-timer/*.service /etc/systemd/system/
            sudo cp -f ~/deploy-temp/systemd-timer/*.timer /etc/systemd/system/
            
            # Set permissions on the deployed unit files.
            sudo chown root:root /etc/systemd/system/*.{service,timer}
            sudo chmod 644 /etc/systemd/system/*.{service,timer}
            
            # Deploy dotmobi-tools scripts.
            sudo find /usr/local/dotmobi-tools -type f -delete
            sudo cp -r ~/deploy-temp/dotmobi-tools/* /usr/local/dotmobi-tools/
            sudo find /usr/local/dotmobi-tools -type f \( -name "*.sh" -o -name "*.py" \) -exec chmod +x {} \;

            # Reload systemd daemon.
            sudo systemctl daemon-reload
            
            # Function to check timer status.
            check_timer() {
              local timer_name="$1"
              echo "Checking status of $timer_name..."
              for i in {1..3}; do
                if systemctl is-active --quiet "$timer_name"; then
                  echo "Timer $timer_name is running"
                  return 0
                fi
                echo "Timer $timer_name is not active, retrying ($i/3)..."
                sleep 2
              done
              echo "ERROR: Timer $timer_name failed to start!"
              systemctl status "$timer_name"
              return 1
            }
            
            # Enable and check all timers.
            for timer in zendesk-it-glue it-glue-backup jamf-pro-notifications zendesk-statusio; do
              sudo systemctl enable --now "$timer.timer"
              sudo systemctl restart "$timer.timer"
              check_timer "$timer.timer"
            done
            
            # Show current timer status.
            echo "Current timer status:"
            sudo systemctl list-timers --all | grep -E "zendesk|it-glue|jamf"

      # Step 7: Cleanup
      - name: Cleanup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            echo "🧹 Cleaning up temporary files..."
            for service in zendesk-it-glue it-glue-backup jamf-pro-notifications zendesk-statusio; do
              sudo systemctl reset-failed "$service.service" || true
              sudo systemctl reset-failed "$service.timer" || true
            done
            rm -rf ~/deploy-temp
